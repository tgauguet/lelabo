<% title "#{@recipe.name.humanize}" %>
<div class="ttl-header">
	<div class="page-ttl">
    <h1 class="lttl-intro-h1"><%= @recipe.name.humanize %></h1>
		<p class="lft-p">Coût de la recette</p>
  </div>
  <div class="page-ctas">
    <%= link_to recipes_path do %>
      <p class="standard-btn grey-btn ingredient-btn"><%= image_tag "arrow-left.png", class: "btn_arrow" %> INDEX</p>
    <% end %>
	</div>
</div>
<div class="rec-rgt-menu">
	<div class="rgt-area">
		<%= render "recipe_bar" %>
	</div>
</div>
<div class="action-cntnt">
  <div class="actions-cntnr">
    <div class="rec-cntnr">
			<% if @recipe.quantities.blank? %>
				<p>Ajoutez des ingrédients à votre recette pour pouvoir calculer son coût de revient</p>
			<% else %>
			<div class="cost_form cost-val">
				<div>
					<%= link_to quant_recipe_path(@recipe), target: "_blank" do %>
						<div class="float-right"><%= image_tag "pencil.png", class: "mini-mini-img" %> Modifier</div>
					<% end %>
					<h3>CALCUL PAR QUANTITÉ</h3>
					<p><%= @recipe.to_product %> <%= @recipe.unit %> <%= @recipe.to_details %></p>
				</div>
			</div>
			<div class="duo-cntnr cost_form">
				<div class="cntnr"><canvas id="radarChart" width="640" height="400"></canvas></div>
				<div class="cntnr float-right"></div>
			</div>
			<div class="cost_form">
					<div class="r-c-cnt blue-bckgrnd">
						<div class="recipe-cost r-c-ttl">
							<p>RECETTE</p>
							<p>POIDS TOTAL</p>
							<p>COÛT TOTAL</p>
						</div>
						<div class="recipe-cost">
							<p><%= truncate(@recipe.name.humanize, length: 25) %></p>
							<p><%= to_kilo(@recipe.recipe_weight) %></p>
							<p><%= number_to_currency @recipe.total_cost %></p>
						</div>
					</div>
					<table summary="informations de coûts">
						<tr class="clear-blue-bckgrnd">
							<th>INGRÉDIENT</th>
							<th>POIDS</th>
							<th>UNITÉ</th>
							<th>PRIX/KG</th>
							<th>% RECETTE</th>
							<th>% PRIX</th>
							<th>PRIX/RECETTE</th>
						</tr>
						<% @recipe.quantities.each do |q| %>
							<tr>
								<td><%= truncate(q.ingredient.name.humanize, length: 25) %></td>
								<td><%= q.weight %></td>
								<td><%= q.unit %></td>
								<td><%= number_to_currency q.ingredient.price %></td>
								<td><%= q.percent %> %</td>
								<td><%= q.price_percent %> %</td>
								<td><%= number_to_currency recipe_price(q, @recipe) %></td>
							</tr>
						<% end %>
						<% @recipe.sub_recipes.each do |sb| %>
							<tr>
								<td><%= truncate(sb.current_recipe.name.humanize, length: 25) %></td>
								<td><%= to_kg(sb.weight) %></td>
								<td><%= to_unit(sb.weight) %></td>
								<td><%= number_to_currency sb.current_recipe.kilo_cost %></td>
								<td><%= sb.percent %> %</td>
								<td><%= sb.price_percent %> %</td>
								<td><%= number_to_currency sub_price(sb, @recipe) %></td>
							</tr>
						<% end %>
					</table>
				</div>
    </div>
		<% end %>
</div>
</div>
</div>
</div>
<script>
/ Radar Chart Options
var radarOptions = {

	//Boolean - If we show the scale above the chart data
	scaleOverlay : false,

	//Boolean - If we want to override with a hard coded scale
	scaleOverride : false,

	//** Required if scaleOverride is true **
	//Number - The number of steps in a hard coded scale
	scaleSteps : null,
	//Number - The value jump in the hard coded scale
	scaleStepWidth : null,
	//Number - The centre starting value
	scaleStartValue : null,

	//Boolean - Whether to show lines for each scale point
	scaleShowLine : true,

	//String - Colour of the scale line
	scaleLineColor : "#999",

	//Number - Pixel width of the scale line
	scaleLineWidth : 1,

	//Boolean - Whether to show labels on the scale
	scaleShowLabels : false,

	//String - Scale label font declaration for the scale label
	scaleFontFamily : "'Arial'",

	//Number - Scale label font size in pixels
	scaleFontSize : 12,

	//String - Scale label font weight style
	scaleFontStyle : "normal",

	//String - Scale label font colour
	scaleFontColor : "#666",

	//Boolean - Show a backdrop to the scale label
	scaleShowLabelBackdrop : true,

	//String - The colour of the label backdrop
	scaleBackdropColor : "rgba(255,255,255,0.75)",

	//Number - The backdrop padding above & below the label in pixels
	scaleBackdropPaddingY : 2,

	//Number - The backdrop padding to the side of the label in pixels
	scaleBackdropPaddingX : 2,

	//Boolean - Whether we show the angle lines out of the radar
	angleShowLineOut : true,

	//String - Colour of the angle line
	angleLineColor : "rgba(255,255,255,0.3)",

	//Number - Pixel width of the angle line
	angleLineWidth : 1,

	//String - Point label font declaration
	pointLabelFontFamily : "'Arial'",

	//String - Point label font weight
	pointLabelFontStyle : "normal",

	//Number - Point label font size in pixels
	pointLabelFontSize : 12,

	//String - Point label font colour
	pointLabelFontColor : "#EFEFEF",

	//Boolean - Whether to show a dot for each point
	pointDot : true,

	//Number - Radius of each point dot in pixels
	pointDotRadius : 3,

	//Number - Pixel width of point dot stroke
	pointDotStrokeWidth : 1,

	//Boolean - Whether to show a stroke for datasets
	datasetStroke : true,

	//Number - Pixel width of dataset stroke
	datasetStrokeWidth : 1,

	//Boolean - Whether to fill the dataset with a colour
	datasetFill : true,

	//Boolean - Whether to animate the chart
	animation : true,

	//Number - Number of animation steps
	animationSteps : 60,

	//String - Animation easing effect
	animationEasing : "easeOutQuart",

	//Function - Fires when the animation is complete
	onAnimationComplete : null

}

// Radar Data
var radarData = {
	labels : ["January","February","March","April","May","June","July"],
	datasets : [
		{
			fillColor : "rgba(220,220,220,0.5)",
			strokeColor : "rgba(220,220,220,1)",
			data : [65,59,90,81,56,55,40]
		},
		{
			fillColor : "rgba(151,187,205,0.5)",
			strokeColor : "rgba(151,187,205,1)",
			data : [28,48,40,19,96,27,100]
		}
	]
}


//Get the context of the Radar Chart canvas element we want to select
var ctx = document.getElementById("radarChart").getContext("2d");

// Create the Radar Chart
var myRadarChart = new Chart(ctx).Radar(radarData, radarOptions);


</script>
